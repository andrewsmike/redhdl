[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["redhdl"]
include-package-data = true

[project]
name = "redhdl"
version = "0.1.0"
description = "SystemVerilog to redstone compiler."
readme = "README.md"
dependencies = [
    "antlr4-python3-runtime==4.9.3",
    "frozendict",
    "graphviz",
    "grandalf",
    "matplotlib",
    "nbtlib",
    "tqdm",
]

[project.optional-dependencies]
test = [
    "ruff",
    "mypy",
    "pytest",
    "pytest-cov",
    "pytest-custom_exit_code",
    "types-frozendict",
]



[project.scripts]
# Top level commands: Compile and visualize schematics
sv_to_schem = "scripts.sv_to_schem:main"
display_schem = "scripts.display_schem:main"

# Visualize vHDL ASTs for development.
display_vhdl = "redhdl.parser.vhdl:display_example_program"

# Visualize busses and debug bussing logic.
visualize_bussing = "scripts.visualize_bussing:main"
debug_bussing = "scripts.debug_bussing:main"


[tool.black]
extend-exclude = '''
^.*/(ascii_dag|autogen|vhdlLexer.py|vhdlListener.py|vhdlVisitor.py|vhdlParser.py|vhdlParserVisitor.py|vhdlParserListener.py)$
'''

[tool.isort]
profile = "black"
atomic = true
force_sort_within_sections = true
multi_line_output = 3
known_first_party = [
    "redhdl",
]

skip = [
    "redhdl/ascii_dag.py",
    "redhdl/vhdl/autogen",
    "redhdl/vhdl/vhdlLexer.py",
    "redhdl/vhdl/vhdlListener.py",
    "redhdl/vhdl/vhdlParser.py",
    "redhdl/vhdl/vhdlVisitor.py",
    "redhdl/vhdl/vhdlParserVisitor.py",
    "redhdl/vhdl/vhdlParserListener.py",
]

[tool.mypy]
ignore_missing_imports = true
exclude = [
    "redhdl/misc/ascii_dag.py",
    "vhdlLexer.py",
    "vhdlListener.py",
    "vhdlParser.py",
    "vhdlParserListener.py",
    "vhdlParserVisitor.py",
    "vhdlVisitor.py",
    "autogen",
]

[[tool.mypy.overrides]]
module = [
    "redhdl.vhdl.vhdlParser",
    "redhdl.vhdl.vhdlLexer",
    "redhdl.vhdl.vhdlListener",
    "redhdl.vhdl.vhdlVisitor",
    "redhdl.vhdl.autogen",
]
follow_imports = "skip"



[tool.pytest.ini_options]
addopts = "--doctest-modules --ignore=redhdl/vhdl/autogen --ignore=redhdl/vhdl/vhdlLexer.py --ignore=redhdl/vhdl/vhdlParser.py --ignore=redhdl/vhdl/vhdlParserVisitor.py"
doctest_optionflags = "ELLIPSIS"
filterwarnings = "ignore::DeprecationWarning"

[tool.pydocstyle]
match-dir = "(?!parser)(?!\\.).*"
match = "(?!test_)(?!ascii_dag).*\\.py"


[tool.ruff]
line-length = 88
exclude = [
    "redhdl/misc/ascii_dag.py",
    "redhdl/vhdl/autogen",
    "redhdl/vhdl/vhdlParser.py",
    "redhdl/vhdl/vhdlLexer.py",
    "redhdl/vhdl/vhdlListener.py",
    "redhdl/vhdl/vhdlVisitor.py",
    "redhdl/vhdl/vhdlParserVisitor.py",
    "redhdl/vhdl/vhdlParserListener.py",
]


[tool.ruff.lint]
# Add the `line-too-long` rule to the enforced rule set. By default, Ruff omits rules that
# overlap with the use of a formatter, like Black, but we can override this behavior by
# explicitly adding the rule.
select = [
    "B",  # flake8-bugbear
    "C", # ?!
    "E",  # pycodestyle
    "F",  # pyflakes
    "W",  # ?!?
    "I",  # isort
    "SIM",  # flake8-simplify
    "UP",   # pyupgrade
]
extend-select = ["E501"]
ignore = [
    "E203",
    "E266",
    "E501",
    "F841",
    # if/else blocks are useful for separating the context for handling different scenarios.
    # Cramming everything into a ternary operator neither adds clarity nor simplifies anything.
    # Having seen many of the "corrected" examples, I feel rather strongly about this.
    "SIM108",
    # Being explicit when iterating over dict.keys() honestly seems clearer to me, though
    # not a hill I'm willing to die on.
    "SIM118",
]

[tool.ruff.format]
docstring-code-format = true
docstring-code-line-length = 100

[tool.ruff.lint.isort]
force-sort-within-sections = true
# multi-line-output = 3

known-first-party = ["redhdl"]
